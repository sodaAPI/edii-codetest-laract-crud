{
  "version": 3,
  "sources": ["../../tsparticles-plugin-emitters/esm/Shapes/Circle/CircleShape.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/EmitterLife.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/EmitterRate.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/EmitterSize.js", "../../tsparticles-plugin-emitters/esm/Options/Classes/Emitter.js", "../../tsparticles-plugin-emitters/esm/EmitterInstance.js", "../../tsparticles-plugin-emitters/esm/Emitters.js", "../../tsparticles-plugin-emitters/esm/ShapeManager.js", "../../tsparticles-plugin-emitters/esm/Shapes/Square/SquareShape.js", "../../tsparticles-plugin-emitters/esm/index.js", "../../tsparticles-updater-life/esm/Options/Classes/LifeDelay.js", "../../tsparticles-updater-life/esm/Options/Classes/LifeDuration.js", "../../tsparticles-updater-life/esm/Options/Classes/Life.js", "../../tsparticles-updater-life/esm/LifeUpdater.js", "../../tsparticles-updater-life/esm/index.js", "../../tsparticles-plugin-motion/esm/Options/Classes/MotionReduce.js", "../../tsparticles-plugin-motion/esm/Options/Classes/Motion.js", "../../tsparticles-plugin-motion/esm/MotionInstance.js", "../../tsparticles-plugin-motion/esm/index.js", "../../tsparticles-updater-roll/esm/Utils.js", "../../tsparticles-updater-roll/esm/Options/Classes/RollLight.js", "../../tsparticles-updater-roll/esm/Options/Classes/Roll.js", "../../tsparticles-updater-roll/esm/RollUpdater.js", "../../tsparticles-updater-roll/esm/index.js", "../../tsparticles-updater-rotate/esm/Options/Classes/RotateAnimation.js", "../../tsparticles-updater-rotate/esm/Options/Classes/Rotate.js", "../../tsparticles-updater-rotate/esm/RotateUpdater.js", "../../tsparticles-updater-rotate/esm/index.js", "../../tsparticles-shape-square/esm/SquareDrawer.js", "../../tsparticles-shape-square/esm/index.js", "../../tsparticles-updater-tilt/esm/Options/Classes/TiltAnimation.js", "../../tsparticles-updater-tilt/esm/Options/Classes/Tilt.js", "../../tsparticles-updater-tilt/esm/Utils.js", "../../tsparticles-updater-tilt/esm/TiltUpdater.js", "../../tsparticles-updater-tilt/esm/index.js", "../../tsparticles-updater-wobble/esm/Options/Classes/WobbleSpeed.js", "../../tsparticles-updater-wobble/esm/Options/Classes/Wobble.js", "../../tsparticles-updater-wobble/esm/Utils.js", "../../tsparticles-updater-wobble/esm/WobbleUpdater.js", "../../tsparticles-updater-wobble/esm/index.js", "../../tsparticles-preset-confetti/esm/options.js", "../../tsparticles-preset-confetti/esm/index.js"],
  "sourcesContent": ["import { getRandom } from \"tsparticles-engine\";\nexport class CircleShape {\n    randomPosition(position, size, fill) {\n        const generateTheta = (x, y) => {\n            const u = getRandom() / 4.0, theta = Math.atan((y / x) * Math.tan(2 * Math.PI * u)), v = getRandom();\n            if (v < 0.25) {\n                return theta;\n            }\n            else if (v < 0.5) {\n                return Math.PI - theta;\n            }\n            else if (v < 0.75) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** 2 + (x * Math.sin(theta)) ** 2), [a, b] = [size.width / 2, size.height / 2], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            x: position.x + randomRadius * Math.cos(randomTheta),\n            y: position.y + randomRadius * Math.sin(randomTheta),\n        };\n    }\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n", "export class EmitterSize {\n    constructor() {\n        this.mode = \"percent\";\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, setRangeValue, } from \"tsparticles-engine\";\nimport { EmitterLife } from \"./EmitterLife\";\nimport { EmitterRate } from \"./EmitterRate\";\nimport { EmitterSize } from \"./EmitterSize\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = \"square\";\n        this.startCount = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        if (data.shape !== undefined) {\n            this.shape = data.shape;\n        }\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n", "import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return getSize(this.size, container.canvas.size);\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n", "import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n            this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n", "const shapes = new Map();\nexport class ShapeManager {\n    constructor(engine) {\n        this._engine = engine;\n    }\n    addShape(name, drawer) {\n        if (!this.getShape(name)) {\n            shapes.set(name, drawer);\n        }\n    }\n    getShape(name) {\n        return shapes.get(name);\n    }\n    getSupportedShapes() {\n        return shapes.keys();\n    }\n}\n", "import { getRandom } from \"tsparticles-engine\";\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - 0.5);\n}\nexport class SquareShape {\n    randomPosition(position, size, fill) {\n        if (fill) {\n            return {\n                x: randomSquareCoordinate(position.x, size.width),\n                y: randomSquareCoordinate(position.y, size.height),\n            };\n        }\n        else {\n            const halfW = size.width / 2, halfH = size.height / 2, side = Math.floor(getRandom() * 4), v = (getRandom() - 0.5) * 2;\n            switch (side) {\n                case 0:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y - halfH,\n                    };\n                case 1:\n                    return {\n                        x: position.x - halfW,\n                        y: position.y + v * halfH,\n                    };\n                case 2:\n                    return {\n                        x: position.x + v * halfW,\n                        y: position.y + halfH,\n                    };\n                case 3:\n                default:\n                    return {\n                        x: position.x + halfW,\n                        y: position.y + v * halfH,\n                    };\n            }\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            engine.emitterShapeManager?.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.random.minimumValue = 0.0001;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { LifeDelay } from \"./LifeDelay\";\nimport { LifeDuration } from \"./LifeDuration\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n", "import { getRandom, getRangeValue, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n", "import { LifeUpdater } from \"./LifeUpdater\";\nexport async function loadLifeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"life\", (container) => new LifeUpdater(container), refresh);\n}\n", "export class MotionReduce {\n    constructor() {\n        this.factor = 4;\n        this.value = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.value !== undefined) {\n            this.value = data.value;\n        }\n    }\n}\n", "import { MotionReduce } from \"./MotionReduce\";\nexport class Motion {\n    constructor() {\n        this.disable = false;\n        this.reduce = new MotionReduce();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.disable !== undefined) {\n            this.disable = data.disable;\n        }\n        this.reduce.load(data.reduce);\n    }\n}\n", "import { safeMatchMedia } from \"tsparticles-engine\";\nexport class MotionInstance {\n    constructor(container, engine) {\n        this._handleMotionChange = (mediaQuery) => {\n            const container = this._container, motion = container.actualOptions.motion;\n            if (!motion) {\n                return;\n            }\n            container.retina.reduceFactor = mediaQuery.matches\n                ? motion.disable\n                    ? 0\n                    : motion.reduce.value\n                        ? 1 / motion.reduce.factor\n                        : 1\n                : 1;\n        };\n        this._container = container;\n        this._engine = engine;\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions.motion;\n        if (!(options && (options.disable || options.reduce.value))) {\n            container.retina.reduceFactor = 1;\n            return;\n        }\n        const mediaQuery = safeMatchMedia(\"(prefers-reduced-motion: reduce)\");\n        if (!mediaQuery) {\n            container.retina.reduceFactor = 1;\n            return;\n        }\n        this._handleMotionChange(mediaQuery);\n        const handleChange = async () => {\n            this._handleMotionChange(mediaQuery);\n            try {\n                await container.refresh();\n            }\n            catch {\n            }\n        };\n        if (mediaQuery.addEventListener !== undefined) {\n            mediaQuery.addEventListener(\"change\", handleChange);\n        }\n        else if (mediaQuery.addListener !== undefined) {\n            mediaQuery.addListener(handleChange);\n        }\n    }\n}\n", "import { Motion } from \"./Options/Classes/Motion\";\nimport { MotionInstance } from \"./MotionInstance\";\nclass MotionPlugin {\n    constructor(engine) {\n        this.id = \"motion\";\n        this._engine = engine;\n    }\n    getPlugin(container) {\n        return new MotionInstance(container, this._engine);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin()) {\n            return;\n        }\n        let motionOptions = options.motion;\n        if (!motionOptions?.load) {\n            options.motion = motionOptions = new Motion();\n        }\n        motionOptions.load(source?.motion);\n    }\n    needsPlugin() {\n        return true;\n    }\n}\nexport async function loadMotionPlugin(engine, refresh = true) {\n    await engine.addPlugin(new MotionPlugin(engine), refresh);\n}\n", "import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nexport function initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = 2 * Math.PI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class RollLight {\n    constructor() {\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.value !== undefined) {\n            this.value = setRangeValue(data.value);\n        }\n    }\n}\n", "import { OptionsColor, setRangeValue, } from \"tsparticles-engine\";\nimport { RollLight } from \"./RollLight\";\nexport class Roll {\n    constructor() {\n        this.darken = new RollLight();\n        this.enable = false;\n        this.enlighten = new RollLight();\n        this.mode = \"vertical\";\n        this.speed = 25;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.backColor !== undefined) {\n            this.backColor = OptionsColor.create(this.backColor, data.backColor);\n        }\n        this.darken.load(data.darken);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.enlighten.load(data.enlighten);\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n    }\n}\n", "import { initParticle, updateRoll } from \"./Utils\";\nimport { Roll } from \"./Options/Classes/Roll\";\nexport class RollUpdater {\n    getTransformValues(particle) {\n        const roll = particle.roll?.enable && particle.roll, rollHorizontal = roll && roll.horizontal, rollVertical = roll && roll.vertical;\n        return {\n            a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n            d: rollVertical ? Math.sin(roll.angle) : undefined,\n        };\n    }\n    init(particle) {\n        initParticle(particle);\n    }\n    isEnabled(particle) {\n        const roll = particle.options.roll;\n        return !particle.destroyed && !particle.spawning && !!roll?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.roll) {\n            options.roll = new Roll();\n        }\n        for (const source of sources) {\n            options.roll.load(source?.roll);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRoll(particle, delta);\n    }\n}\n", "import { RollUpdater } from \"./RollUpdater\";\nexport async function loadRollUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"roll\", () => new RollUpdater(), refresh);\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom, } from \"tsparticles-engine\";\nimport { RotateAnimation } from \"./RotateAnimation\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = \"clockwise\";\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n", "import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateRotate(particle, delta) {\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRotate(particle, delta);\n        particle.rotation = particle.rotate?.value ?? 0;\n    }\n}\n", "import { RotateUpdater } from \"./RotateUpdater\";\nexport async function loadRotateUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"rotate\", (container) => new RotateUpdater(container), refresh);\n}\n", "const fixFactor = Math.sqrt(2);\nexport class SquareDrawer {\n    draw(context, particle, radius) {\n        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2;\n        context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n    }\n    getSidesCount() {\n        return 4;\n    }\n}\n", "import { SquareDrawer } from \"./SquareDrawer\";\nexport async function loadSquareShape(engine, refresh = true) {\n    await engine.addShape([\"edge\", \"square\"], new SquareDrawer(), refresh);\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class TiltAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom } from \"tsparticles-engine\";\nimport { TiltAnimation } from \"./TiltAnimation\";\nexport class Tilt extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new TiltAnimation();\n        this.direction = \"clockwise\";\n        this.enable = false;\n        this.value = 0;\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.animation.load(data.animation);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "export function updateTilt(particle, delta) {\n    if (!particle.tilt || !particle.options.tilt) {\n        return;\n    }\n    const tilt = particle.options.tilt, tiltAnimation = tilt.animation, speed = (particle.tilt.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = particle.tilt.decay ?? 1;\n    if (!tiltAnimation.enable) {\n        return;\n    }\n    switch (particle.tilt.status) {\n        case \"increasing\":\n            particle.tilt.value += speed;\n            if (particle.tilt.value > max) {\n                particle.tilt.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            particle.tilt.value -= speed;\n            if (particle.tilt.value < 0) {\n                particle.tilt.value += max;\n            }\n            break;\n    }\n    if (particle.tilt.velocity && decay !== 1) {\n        particle.tilt.velocity *= decay;\n    }\n}\n", "import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateTilt(particle, delta);\n    }\n}\n", "import { TiltUpdater } from \"./TiltUpdater\";\nexport async function loadTiltUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"tilt\", (container) => new TiltUpdater(container), refresh);\n}\n", "import { setRangeValue } from \"tsparticles-engine\";\nexport class WobbleSpeed {\n    constructor() {\n        this.angle = 50;\n        this.move = 10;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            this.angle = setRangeValue(data.angle);\n        }\n        if (data.move !== undefined) {\n            this.move = setRangeValue(data.move);\n        }\n    }\n}\n", "import { isNumber, setRangeValue, } from \"tsparticles-engine\";\nimport { WobbleSpeed } from \"./WobbleSpeed\";\nexport class Wobble {\n    constructor() {\n        this.distance = 5;\n        this.enable = false;\n        this.speed = new WobbleSpeed();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = setRangeValue(data.distance);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            if (isNumber(data.speed)) {\n                this.speed.load({ angle: data.speed });\n            }\n            else {\n                const rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                    this.speed.load({ angle: rangeSpeed });\n                }\n                else {\n                    this.speed.load(data.speed);\n                }\n            }\n        }\n    }\n}\n", "export function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? 0) * delta.factor)) / (1000 / 60), max = 2 * Math.PI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n", "import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nimport { updateWobble } from \"./Utils\";\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * Math.PI * 2,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue(wobbleOpt?.distance ?? 0) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n", "import { WobbleUpdater } from \"./WobbleUpdater\";\nexport async function loadWobbleUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"wobble\", (container) => new WobbleUpdater(container), refresh);\n}\n", "export const options = {\n    fullScreen: {\n        enable: true,\n        zIndex: 100,\n    },\n    fpsLimit: 120,\n    particles: {\n        number: {\n            value: 0,\n        },\n        color: {\n            value: [\"#26ccff\", \"#a25afd\", \"#ff5e7e\", \"#88ff5a\", \"#fcff42\", \"#ffa62d\", \"#ff36ff\"],\n        },\n        shape: {\n            type: [\"square\", \"circle\"],\n        },\n        opacity: {\n            value: { min: 0, max: 1 },\n            animation: {\n                enable: true,\n                speed: 0.5,\n                startValue: \"max\",\n                destroy: \"min\",\n            },\n        },\n        size: {\n            value: 5,\n        },\n        links: {\n            enable: false,\n        },\n        life: {\n            duration: {\n                sync: true,\n                value: 20 / 6,\n            },\n            count: 1,\n        },\n        move: {\n            angle: {\n                value: 45,\n                offset: 0,\n            },\n            drift: 0,\n            enable: true,\n            gravity: {\n                enable: true,\n                acceleration: 9.81,\n            },\n            speed: 45,\n            decay: 0.1,\n            direction: -90,\n            random: true,\n            straight: false,\n            outModes: {\n                default: \"none\",\n                bottom: \"destroy\",\n            },\n        },\n        rotate: {\n            value: {\n                min: 0,\n                max: 360,\n            },\n            direction: \"random\",\n            animation: {\n                enable: true,\n                speed: 60,\n            },\n        },\n        tilt: {\n            direction: \"random\",\n            enable: true,\n            value: {\n                min: 0,\n                max: 360,\n            },\n            animation: {\n                enable: true,\n                speed: 60,\n            },\n        },\n        roll: {\n            darken: {\n                enable: true,\n                value: 25,\n            },\n            enable: true,\n            speed: {\n                min: 15,\n                max: 25,\n            },\n        },\n        wobble: {\n            distance: 30,\n            enable: true,\n            speed: {\n                min: -15,\n                max: 15,\n            },\n        },\n    },\n    detectRetina: true,\n    motion: {\n        disable: true,\n    },\n    emitters: {\n        name: \"confetti\",\n        startCount: 50,\n        position: {\n            x: 50,\n            y: 50,\n        },\n        size: {\n            width: 0,\n            height: 0,\n        },\n        rate: {\n            delay: 0,\n            quantity: 0,\n        },\n        life: {\n            duration: 0.1,\n            count: 1,\n        },\n    },\n};\n", "import { loadBasic } from \"tsparticles-basic\";\nimport { loadEmittersPlugin } from \"tsparticles-plugin-emitters\";\nimport { loadLifeUpdater } from \"tsparticles-updater-life\";\nimport { loadMotionPlugin } from \"tsparticles-plugin-motion\";\nimport { loadRollUpdater } from \"tsparticles-updater-roll\";\nimport { loadRotateUpdater } from \"tsparticles-updater-rotate\";\nimport { loadSquareShape } from \"tsparticles-shape-square\";\nimport { loadTiltUpdater } from \"tsparticles-updater-tilt\";\nimport { loadWobbleUpdater } from \"tsparticles-updater-wobble\";\nimport { options } from \"./options\";\nasync function loadPreset(engine, refresh = true) {\n    await loadBasic(engine, false);\n    await loadSquareShape(engine, false);\n    await loadEmittersPlugin(engine, false);\n    await loadMotionPlugin(engine, false);\n    await loadWobbleUpdater(engine, false);\n    await loadRollUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadTiltUpdater(engine, false);\n    await loadLifeUpdater(engine, false);\n    await engine.addPreset(\"confetti\", options, refresh);\n}\nexport async function loadConfettiPreset(engine) {\n    await loadPreset(engine);\n}\n"],
  "mappings": "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",
  "names": ["options", "_a", "_b", "position", "particlesOptions", "container", "options", "options", "options", "container", "options", "options", "options", "options", "options", "options"]
}
